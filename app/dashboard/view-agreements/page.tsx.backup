'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { motion, AnimatePresence } from 'framer-motion'
import {
  DocumentTextIcon,
  ShieldCheckIcon,
  CameraIcon,
  CheckCircleIcon,
  XMarkIcon,
  ClockIcon,
  ArrowLeftIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from '@heroicons/react/24/outline'
import { DocumentTextIcon as DocumentSolid, ShieldCheckIcon as ShieldSolid } from '@heroicons/react/24/solid'
import { supabase } from '@/lib/supabase'
import Link from 'next/link'

export default function ViewAgreementsPage() {
  const router = useRouter()
  const [loading, setLoading] = useState(true)
  const [agreement, setAgreement] = useState<any>(null)
  const [profile, setProfile] = useState<any>(null)
  const [expandedItems, setExpandedItems] = useState<string[]>([])

  useEffect(() => {
    loadAgreements()
  }, [])

  const loadAgreements = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser()
      if (authError || !user) {
        router.push('/login')
        return
      }

      // Get user profile
      const { data: profileData } = await supabase
        .from('profiles')
        .select('first_name, last_name, email')
        .eq('id', user.id)
        .single()

      setProfile(profileData)

      // Get signed agreements
      const { data: agreementData } = await supabase
        .from('legal_agreements')
        .select('*')
        .eq('user_id', user.id)
        .single()

      setAgreement(agreementData)
    } catch (error) {
      console.error('Error loading agreements:', error)
    } finally {
      setLoading(false)
    }
  }

  const formatDate = (dateString: string | null) => {
    if (!dateString) return 'Not signed'
    return new Date(dateString).toLocaleString('en-GB', {
      dateStyle: 'full',
      timeStyle: 'short'
    })
  }

  const toggleExpand = (key: string) => {
    setExpandedItems(prev =>
      prev.includes(key) ? prev.filter(k => k !== key) : [...prev, key]
    )
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-gray-50 to-zinc-50 flex items-center justify-center">
        <div className="text-center">
          <div className="relative">
            <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-slate-600 mx-auto"></div>
            <DocumentSolid className="h-6 w-6 text-slate-600 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2" />
          </div>
          <p className="mt-4 text-gray-600 font-medium">Loading agreements...</p>
        </div>
      </div>
    )
  }

  if (!agreement) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-canine-cream to-white py-8">
        <div className="max-w-4xl mx-auto px-4">
          <Link href="/dashboard" className="inline-flex items-center text-canine-gold hover:text-canine-navy mb-6">
            <ArrowLeftIcon className="w-5 h-5 mr-2" />
            Back to Dashboard
          </Link>

          <div className="bg-white rounded-lg shadow-lg p-8 text-center">
            <DocumentTextIcon className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h2 className="text-2xl font-display font-bold text-gray-700 mb-2">
              No Agreements Signed
            </h2>
            <p className="text-gray-600 mb-6">
              You haven't signed any legal agreements yet.
            </p>
            <Link href="/dashboard/legal-agreements" className="btn-primary">
              Sign Agreements
            </Link>
          </div>
        </div>
      </div>
    )
  }

  const agreementsList = [
    {
      title: 'Terms & Conditions',
      key: 'terms_accepted',
      timestampKey: 'terms_accepted_at',
      required: true,
      icon: DocumentTextIcon,
      color: 'blue'
    },
    {
      title: 'Injury & Disease Waiver',
      key: 'injury_waiver_agreed',
      timestampKey: 'injury_waiver_agreed_at',
      required: true,
      icon: ShieldCheckIcon,
      color: 'red'
    },
    {
      title: 'Photo/Video Permission',
      key: 'photo_permission_granted',
      timestampKey: 'photo_permission_granted_at',
      required: false,
      icon: CameraIcon,
      color: 'purple'
    },
    {
      title: 'Vaccination Requirements',
      key: 'vaccination_requirement_understood',
      timestampKey: 'vaccination_requirement_understood_at',
      required: true,
      icon: ShieldCheckIcon,
      color: 'green'
    },
    {
      title: 'Behavioral Assessment',
      key: 'behavioral_assessment_agreed',
      timestampKey: 'behavioral_assessment_agreed_at',
      required: true,
      icon: DocumentTextIcon,
      color: 'yellow'
    },
    {
      title: 'Medication Administration Consent',
      key: 'medication_administration_consent',
      timestampKey: 'medication_administration_consent_at',
      required: true,
      icon: ShieldCheckIcon,
      color: 'indigo'
    },
    {
      title: 'Emergency Contact Consent',
      key: 'emergency_contact_consent',
      timestampKey: 'emergency_contact_consent_at',
      required: true,
      icon: ShieldCheckIcon,
      color: 'pink'
    },
    {
      title: 'Property Damage Waiver',
      key: 'property_damage_waiver',
      timestampKey: 'property_damage_waiver_at',
      required: true,
      icon: ShieldCheckIcon,
      color: 'orange'
    },
    {
      title: 'Collection Procedure',
      key: 'collection_procedure_agreed',
      timestampKey: 'collection_procedure_agreed_at',
      required: true,
      icon: DocumentTextIcon,
      color: 'teal'
    },
    {
      title: 'Data Protection Consent',
      key: 'data_protection_consent',
      timestampKey: 'data_protection_consent_at',
      required: true,
      icon: ShieldCheckIcon,
      color: 'gray'
    }
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-canine-cream to-white py-8">
      <div className="max-w-4xl mx-auto px-4">
        <Link href="/dashboard" className="inline-flex items-center text-canine-gold hover:text-canine-navy mb-6">
          <ArrowLeftIcon className="w-5 h-5 mr-2" />
          Back to Dashboard
        </Link>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-lg shadow-lg p-8 mb-6"
        >
          <div className="flex items-center mb-6">
            <DocumentTextIcon className="w-10 h-10 text-canine-gold mr-4" />
            <div>
              <h1 className="text-3xl font-display font-bold text-canine-navy">
                Your Legal Agreements
              </h1>
              <p className="text-gray-600">Review your signed waivers and consents</p>
            </div>
          </div>

          {/* Signature Information */}
          <div className="bg-canine-sky rounded-lg p-6 mb-6">
            <h3 className="font-semibold text-canine-navy mb-3">Signature Details</h3>
            <div className="space-y-2 text-sm">
              <p><strong>Signed by:</strong> {agreement.digital_signature}</p>
              <p><strong>Name on account:</strong> {profile?.first_name} {profile?.last_name}</p>
              <p><strong>Date signed:</strong> {formatDate(agreement.signed_at)}</p>
              <p><strong>Agreement version:</strong> {agreement.version || '1.0'}</p>
            </div>
          </div>

          {/* Agreements Status */}
          <h2 className="text-xl font-display font-bold text-canine-navy mb-4">
            Agreement Status
          </h2>

          <div className="space-y-3">
            {agreementsList.map((item) => {
              const Icon = item.icon
              const isAccepted = agreement[item.key]
              const timestamp = agreement[item.timestampKey]

              return (
                <div
                  key={item.key}
                  className={`border rounded-lg p-4 ${
                    isAccepted ? 'border-green-300 bg-green-50' : 'border-gray-300 bg-gray-50'
                  }`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex items-start flex-1">
                      <Icon className={`w-6 h-6 mr-3 mt-0.5 ${
                        isAccepted ? 'text-green-600' : 'text-gray-400'
                      }`} />
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <h3 className="font-semibold text-gray-800">
                            {item.title}
                          </h3>
                          {!item.required && (
                            <span className="text-xs bg-gray-200 text-gray-600 px-2 py-0.5 rounded">
                              Optional
                            </span>
                          )}
                        </div>
                        <div className="flex items-center mt-1 text-sm">
                          <ClockIcon className="w-4 h-4 mr-1 text-gray-500" />
                          <span className="text-gray-600">
                            {formatDate(timestamp)}
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="ml-4">
                      {isAccepted ? (
                        <CheckCircleIcon className="w-6 h-6 text-green-600" />
                      ) : (
                        <XMarkIcon className="w-6 h-6 text-gray-400" />
                      )}
                    </div>
                  </div>
                </div>
              )
            })}
          </div>

          {/* Footer Note */}
          <div className="mt-6 p-4 bg-amber-50 border border-amber-200 rounded-lg">
            <p className="text-sm text-amber-800">
              <strong>Note:</strong> These agreements were signed electronically on {formatDate(agreement.signed_at)}.
              If you need to update any information or have questions about these agreements, please contact us.
            </p>
          </div>
        </motion.div>
      </div>
    </div>
  )
}
